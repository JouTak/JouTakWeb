name: CI

on:
  push: { }
  pull_request: { }

jobs:
  frontend_lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install deps
        run: npm ci

      - name: ESLint
        run: npx eslint .

      - name: Prettier check
        run: npx prettier --check "**/*.{js,jsx,ts,tsx,json,css,md}"

      - name: Stylelint
        run: npx stylelint "**/*.{css,scss}"

  backend_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Cache uv
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
            uv.lock
          key: uv-${{ runner.os }}-${{ hashFiles('pyproject.toml', 'uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-

      - name: Sync deps (with dev)
        run: uv sync --python 3.12 --group dev

      - name: Ruff
        run: uv run ruff check .

      - name: Django tests (sqlite)
        env:
          PYTHONPATH: ${{ github.workspace }}
          DJANGO_SETTINGS_MODULE: backend.settings.prod
          DJANGO_SECRET_KEY: test-secret-key-change-me-please-very-long-1234567890
          DATABASE_URL: sqlite:///./testdb.sqlite3
          DB_SSL_REQUIRED: 'false'
          DJANGO_ALLOWED_HOSTS: localhost,127.0.0.1,api.joutak.ru
          DJANGO_CSRF_TRUSTED_ORIGINS: http://localhost,http://127.0.0.1,https://joutak.ru,https://api.joutak.ru
          CORS_ALLOWED_ORIGINS: http://localhost,http://127.0.0.1,https://joutak.ru
          USE_X_FORWARDED_PROTO: 'false'
          SECURE_SSL_REDIRECT: 'false'
          SECURE_HSTS_SECONDS: '0'
          SESSION_COOKIE_SECURE: 'false'
          CSRF_COOKIE_SECURE: 'false'
          SESSION_COOKIE_SAMESITE: 'None'
          CSRF_COOKIE_SAMESITE: 'None'
        run: |
          uv run python --version
          uv run python backend/manage.py check
          uv run python backend/manage.py test -v 2

  build-and-push:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [ frontend_lint, backend_test ]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # ---------- FRONTEND ----------
      - name: Build & tag frontend
        run: |
          OWNER_LC=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          FRONTEND_IMAGE=ghcr.io/${OWNER_LC}/joutakweb
          docker build -t $FRONTEND_IMAGE:latest -f ./frontend/Dockerfile ./frontend
          docker tag $FRONTEND_IMAGE:latest $FRONTEND_IMAGE:${{ github.run_number }}
      - name: Push frontend
        run: |
          OWNER_LC=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          FRONTEND_IMAGE=ghcr.io/${OWNER_LC}/joutakweb
          docker push $FRONTEND_IMAGE:latest
          docker push $FRONTEND_IMAGE:${{ github.run_number }}

      # ---------- BACKEND ----------
      - name: Build & tag backend (joutakweb-api)
        run: |
          OWNER_LC=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          BACKEND_IMAGE=ghcr.io/${OWNER_LC}/joutakweb-api
          docker build -t $BACKEND_IMAGE:latest -f ./backend/Dockerfile .
          docker tag $BACKEND_IMAGE:latest $BACKEND_IMAGE:${{ github.run_number }}
      - name: Push backend
        run: |
          OWNER_LC=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          BACKEND_IMAGE=ghcr.io/${OWNER_LC}/joutakweb-api
          docker push $BACKEND_IMAGE:latest
          docker push $BACKEND_IMAGE:${{ github.run_number }}
